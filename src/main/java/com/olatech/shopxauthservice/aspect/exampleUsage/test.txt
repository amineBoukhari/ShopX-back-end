package com.olatech.shopxauthservice.aspect.exampleUsage;

import com.olatech.shopxauthservice.Model.Product;
import com.olatech.shopxauthservice.aspect.CheckSubscriptionLimit;
import com.olatech.shopxauthservice.aspect.LimitType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import java.util.List;

/**
 * Exemple de contrôleur utilisant l'annotation @CheckSubscriptionLimit
 * pour vérifier les limites des plans d'abonnement.

public class ProductController {

    // Supposons que ce service existe et gère les produits
    private final ProductService productService;

    public ProductController(ProductService productService) {
        this.productService = productService;
    }

    /**
     * Crée un nouveau produit après vérification des limites du plan
     */
    @PostMapping
    @CheckSubscriptionLimit(type = LimitType.PRODUCT)
    public ResponseEntity<Product> createProduct(@RequestBody Product product, @RequestParam Long storeId) {
        Product createdProduct = productService.createProduct(product, storeId);
        return ResponseEntity.ok(createdProduct);
    }

    /**
     * Crée plusieurs produits en une seule opération
     */
    @PostMapping("/bulk")
    @CheckSubscriptionLimit(type = LimitType.PRODUCT, amount = 5)
    public ResponseEntity<List<Product>> createBulkProducts(
            @RequestBody List<Product> products,
            @RequestParam Long storeId) {
        List<Product> createdProducts = productService.createBulkProducts(products, storeId);
        return ResponseEntity.ok(createdProducts);
    }

    /**
     * Télécharge une image de produit avec vérification de la limite de stockage
     */
    @PostMapping("/{productId}/image")
    @CheckSubscriptionLimit(type = LimitType.STORAGE, storeIdParam = "product.store.id")
    public ResponseEntity<String> uploadProductImage(
            @PathVariable Long productId,
            @RequestParam("file") MultipartFile file) {
        // Calculer la taille en MB
        int fileSizeInMB = (int) (file.getSize() / (1024 * 1024));

        // Récupérer le produit pour obtenir le store associé
        Product product = productService.getProduct(productId);

        String imageUrl = productService.uploadProductImage(productId, file);
        return ResponseEntity.ok(imageUrl);
    }

    /**
     * Exporte des données produit en CSV (vérifie l'accès à cette fonctionnalité)
     */
    @GetMapping("/export")
    @CheckSubscriptionLimit(type = LimitType.FEATURE, increment = false)
    public ResponseEntity<byte[]> exportProductsData(@RequestParam Long storeId) {
        byte[] csvData = productService.exportProductsToCSV(storeId);
        return ResponseEntity
                .ok()
                .header("Content-Disposition", "attachment; filename=products.csv")
                .body(csvData);
    }

    /**
     * Méthode qui effectue un appel à une API externe et vérifie les limites d'API
     */
    @PostMapping("/{productId}/sync-external")
    @CheckSubscriptionLimit(type = LimitType.API_CALL)
    public ResponseEntity<Product> syncWithExternalSystem(
            @PathVariable Long productId,
            @RequestParam Long storeId) {
        Product updatedProduct = productService.syncWithExternalSystem(productId);
        return ResponseEntity.ok(updatedProduct);
    }
}
